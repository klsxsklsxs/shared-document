<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [debug\dev_msc_sdcard_lite_bm.out]</title></head>
<body><HR>
<H1>Static Call Graph for image debug\dev_msc_sdcard_lite_bm.out</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Jun 23 16:15:37 2020
<BR><P>
<H3>Maximum Stack Usage =       1020 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; USB_DeviceMscAppTask &rArr; USB_DeviceMscApp &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[d3]">DbgConsole_SendDataReliable</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bc]">__aeabi_assert</a><BR>
 <LI><a href="#[134]">SerialManager_Write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bc]">__aeabi_assert</a><BR>
 <LI><a href="#[133]">Serial_UartWrite</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bc]">__aeabi_assert</a><BR>
 <LI><a href="#[db]">HAL_UartSendBlocking</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bc]">__aeabi_assert</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[31]">ADC0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[53]">ADC1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[56]">CAN0_Bus_Off_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[8a]">CAN0_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[57]">CAN0_Error_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[55]">CAN0_ORed_Message_buffer_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[59]">CAN0_Rx_Warning_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[58]">CAN0_Tx_Warning_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[5a]">CAN0_Wake_Up_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[32]">CMP0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[33]">CMP1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[50]">CMP2_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[37]">CMT_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[42]">DAC0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[52]">DAC1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[64]">DMA0_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[a]">DMA0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[6e]">DMA10_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[14]">DMA10_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[6f]">DMA11_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[15]">DMA11_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[70]">DMA12_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[16]">DMA12_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[71]">DMA13_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[17]">DMA13_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[72]">DMA14_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[18]">DMA14_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[73]">DMA15_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[19]">DMA15_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[65]">DMA1_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[b]">DMA1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[66]">DMA2_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[c]">DMA2_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[67]">DMA3_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[d]">DMA3_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[68]">DMA4_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[e]">DMA4_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[69]">DMA5_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[f]">DMA5_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[6a]">DMA6_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[10]">DMA6_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[6b]">DMA7_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[11]">DMA7_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[6c]">DMA8_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[12]">DMA8_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[6d]">DMA9_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[13]">DMA9_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[74]">DMA_Error_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[1a]">DMA_Error_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[90]">DbgConsole_PrintCallback</a> from fsl_debug_console.o(i.DbgConsole_PrintCallback) referenced from fsl_debug_console.o(i.DbgConsole_Printf)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[60]">DefaultISR</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[60]">DefaultISR</a> from startup_mk64f12.o(.text) referenced 153 times from startup_mk64f12.o(RESET)
 <LI><a href="#[8c]">ENET_1588_Timer_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[5c]">ENET_1588_Timer_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[8f]">ENET_Error_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[5f]">ENET_Error_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[8e]">ENET_Receive_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[5e]">ENET_Receive_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[8d]">ENET_Transmit_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[5d]">ENET_Transmit_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[1c]">FTFE_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[34]">FTM0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[35]">FTM1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[36]">FTM2_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[51]">FTM3_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[75]">I2C0_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[22]">I2C0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[76]">I2C1_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[23]">I2C1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[89]">I2C2_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[54]">I2C2_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[7a]">I2S0_Rx_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[27]">I2S0_Rx_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[79]">I2S0_Tx_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[26]">I2S0_Tx_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[1f]">LLWU_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[44]">LPTMR0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[1e]">LVD_LVW_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[43]">MCG_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[1b]">MCM_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[3e]">PDB0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[3a]">PIT0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[3b]">PIT1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[3c]">PIT2_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[3d]">PIT3_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[45]">PORTA_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[46]">PORTB_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[47]">PORTC_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[48]">PORTD_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[49]">PORTE_IRQHandler</a> from fsl_sdmmc_host.o(i.PORTE_IRQHandler) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[21]">RNG_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[38]">RTC_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[39]">RTC_Seconds_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[1d]">Read_Collision_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[41]">Reserved71_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[8b]">SDHC_DriverIRQHandler</a> from fsl_sdhc.o(i.SDHC_DriverIRQHandler) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[5b]">SDHC_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[91]">SDHC_TransferHandleIRQ</a> from fsl_sdhc.o(i.SDHC_TransferHandleIRQ) referenced from fsl_sdhc.o(i.SDHC_TransferCreateHandle)
 <LI><a href="#[93]">SDMMCHOST_DetectCardInsertByHost</a> from fsl_sdmmc_host.o(i.SDMMCHOST_DetectCardInsertByHost) referenced from fsl_sdmmc_host.o(i.SDMMCHOST_Init)
 <LI><a href="#[94]">SDMMCHOST_DetectCardRemoveByHost</a> from fsl_sdmmc_host.o(i.SDMMCHOST_DetectCardRemoveByHost) referenced from fsl_sdmmc_host.o(i.SDMMCHOST_Init)
 <LI><a href="#[92]">SDMMCHOST_TransferCompleteCallback</a> from fsl_sdmmc_host.o(i.SDMMCHOST_TransferCompleteCallback) referenced from fsl_sdmmc_host.o(i.SDMMCHOST_Init)
 <LI><a href="#[95]">SDMMCHOST_TransferFunction</a> from fsl_sdmmc_host.o(i.SDMMCHOST_TransferFunction) referenced from fsl_sdmmc_host.o(i.SDMMCHOST_Init)
 <LI><a href="#[77]">SPI0_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[24]">SPI0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[78]">SPI1_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[25]">SPI1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[84]">SPI2_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[4b]">SPI2_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[4a]">SWI_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from fsl_sdmmc_event.o(i.SysTick_Handler) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[62]">SystemInit</a> from system_mk64f12.o(i.SystemInit) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[7d]">UART0_ERR_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[2a]">UART0_ERR_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[7b]">UART0_LON_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[28]">UART0_LON_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[7c]">UART0_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART0_RX_TX_DriverIRQHandler) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[29]">UART0_RX_TX_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[7f]">UART1_ERR_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[2c]">UART1_ERR_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[7e]">UART1_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART1_RX_TX_DriverIRQHandler) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[2b]">UART1_RX_TX_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[81]">UART2_ERR_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[2e]">UART2_ERR_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[80]">UART2_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART2_RX_TX_DriverIRQHandler) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[2d]">UART2_RX_TX_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[83]">UART3_ERR_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[30]">UART3_ERR_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[82]">UART3_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART3_RX_TX_DriverIRQHandler) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[2f]">UART3_RX_TX_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[86]">UART4_ERR_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[4d]">UART4_ERR_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[85]">UART4_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART4_RX_TX_DriverIRQHandler) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[4c]">UART4_RX_TX_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[88]">UART5_ERR_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[4f]">UART5_ERR_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[87]">UART5_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART5_RX_TX_DriverIRQHandler) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[4e]">UART5_RX_TX_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[3f]">USB0_IRQHandler</a> from disk_sdcard.o(i.USB0_IRQHandler) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[40]">USBDCD_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[96]">USB_DeviceCallback</a> from disk_sdcard.o(i.USB_DeviceCallback) referenced from disk_sdcard.o(i.USB_DeviceApplicationInit)
 <LI><a href="#[9e]">USB_DeviceCh9GetConfiguration</a> from usb_device_ch9.o(i.USB_DeviceCh9GetConfiguration) referenced from usb_device_ch9.o(.constdata)
 <LI><a href="#[9d]">USB_DeviceCh9GetDescriptor</a> from usb_device_ch9.o(i.USB_DeviceCh9GetDescriptor) referenced from usb_device_ch9.o(.constdata)
 <LI><a href="#[a0]">USB_DeviceCh9GetInterface</a> from usb_device_ch9.o(i.USB_DeviceCh9GetInterface) referenced from usb_device_ch9.o(.constdata)
 <LI><a href="#[9a]">USB_DeviceCh9GetStatus</a> from usb_device_ch9.o(i.USB_DeviceCh9GetStatus) referenced from usb_device_ch9.o(.constdata)
 <LI><a href="#[9c]">USB_DeviceCh9SetAddress</a> from usb_device_ch9.o(i.USB_DeviceCh9SetAddress) referenced from usb_device_ch9.o(.constdata)
 <LI><a href="#[9b]">USB_DeviceCh9SetClearFeature</a> from usb_device_ch9.o(i.USB_DeviceCh9SetClearFeature) referenced 2 times from usb_device_ch9.o(.constdata)
 <LI><a href="#[9f]">USB_DeviceCh9SetConfiguration</a> from usb_device_ch9.o(i.USB_DeviceCh9SetConfiguration) referenced from usb_device_ch9.o(.constdata)
 <LI><a href="#[a1]">USB_DeviceCh9SetInterface</a> from usb_device_ch9.o(i.USB_DeviceCh9SetInterface) referenced from usb_device_ch9.o(.constdata)
 <LI><a href="#[a2]">USB_DeviceCh9SynchFrame</a> from usb_device_ch9.o(i.USB_DeviceCh9SynchFrame) referenced from usb_device_ch9.o(.constdata)
 <LI><a href="#[97]">USB_DeviceControlCallback</a> from usb_device_ch9.o(i.USB_DeviceControlCallback) referenced from usb_device_ch9.o(i.USB_DeviceControlPipeInit)
 <LI><a href="#[a7]">USB_DeviceKhciCancel</a> from usb_device_khci.o(i.USB_DeviceKhciCancel) referenced from usb_device_dci.o(.constdata)
 <LI><a href="#[a8]">USB_DeviceKhciControl</a> from usb_device_khci.o(i.USB_DeviceKhciControl) referenced from usb_device_dci.o(.constdata)
 <LI><a href="#[a4]">USB_DeviceKhciDeinit</a> from usb_device_khci.o(i.USB_DeviceKhciDeinit) referenced from usb_device_dci.o(.constdata)
 <LI><a href="#[a3]">USB_DeviceKhciInit</a> from usb_device_khci.o(i.USB_DeviceKhciInit) referenced from usb_device_dci.o(.constdata)
 <LI><a href="#[a6]">USB_DeviceKhciRecv</a> from usb_device_khci.o(i.USB_DeviceKhciRecv) referenced from usb_device_dci.o(.constdata)
 <LI><a href="#[a5]">USB_DeviceKhciSend</a> from usb_device_khci.o(i.USB_DeviceKhciSend) referenced from usb_device_dci.o(.constdata)
 <LI><a href="#[98]">USB_DeviceMscBulkIn</a> from disk_sdcard.o(i.USB_DeviceMscBulkIn) referenced from disk_sdcard.o(i.USB_DeviceMscEndpointsInit)
 <LI><a href="#[99]">USB_DeviceMscBulkOut</a> from disk_sdcard.o(i.USB_DeviceMscBulkOut) referenced from disk_sdcard.o(i.USB_DeviceMscEndpointsInit)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[20]">WDOG_EWM_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[63]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[61]">main</a> from disk_sdcard.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[63]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[1bd]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[a9]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ae]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1be]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1bf]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1c0]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1c1]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1c2]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[12a]"></a>__asm___8_fsl_sd_c_66d42394____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_sd.o(.rev16_text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadStatus
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendScr
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectFunction
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DMA0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DMA1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DMA2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA9_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA10_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA11_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA12_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA13_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA14_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA15_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA_Error_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2C0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>I2C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SPI0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2S0_Tx_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2S0_Rx_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>UART0_LON_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>UART0_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>UART0_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>UART1_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>UART1_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UART2_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UART2_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>UART3_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>UART3_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>UART4_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>UART4_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>UART5_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART5_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN0_ORed_Message_buffer_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN0_Bus_Off_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN0_Error_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN0_Tx_Warning_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN0_Rx_Warning_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN0_Wake_Up_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SDHC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>ENET_1588_Timer_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>ENET_Transmit_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>ENET_Receive_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>ENET_Error_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>CAN0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[32]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DAC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>DMA10_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>DMA11_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>DMA12_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>DMA13_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>DMA14_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>DMA15_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>DMA1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>DMA3_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>DMA4_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>DMA5_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>DMA6_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>DMA7_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>DMA8_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>DMA9_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>DMA_Error_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mk64f12.o(RESET)
<LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>ENET_1588_Timer_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>ENET_Error_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>ENET_Receive_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>ENET_Transmit_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[1c]"></a>FTFE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>FTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>FTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>FTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>FTM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>I2C0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>I2C1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>I2C2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>I2S0_Rx_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>I2S0_Tx_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[1f]"></a>LLWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>LPTMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>MCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PDB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>PIT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PIT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>PIT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>PIT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>PORTA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>PORTB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>PORTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>PORTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Read_Collision_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>Reserved71_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SPI0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>SPI1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>SPI2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>SWI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>UART0_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>UART0_LON_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>UART1_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>UART2_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>UART3_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>UART4_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>UART5_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>USBDCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>WDOG_EWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[129]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlocks
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlocks
</UL>

<P><STRONG><a name="[1c3]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1c5]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlocks
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlocks
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferCreateHandle
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_StartTransfer
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SwitchToVoltage
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SetBlockSize
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendApplicationCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SelectCard
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GoIdle
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ExecuteTuning
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadStatus
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteComplete
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchFunction
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransmission
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDataBusWidth
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendWriteSuccessBlocks
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendScr
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendRca
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendInterfaceCondition
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCsd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectFunction
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ApplicationSendOperationCondition
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_AllSendCid
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_initialize
</UL>

<P><STRONG><a name="[1c7]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[136]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[aa]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1c8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, clock_config.o(i.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = BOARD_BootClockRUN &rArr; CLOCK_BootToPeeMode &rArr; CLOCK_SetPbeMode &rArr; CLOCK_EnablePll0 &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetSimConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetInternalRefClkConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitOsc0
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToPeeMode
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_CONFIG_SetFllExtRefDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>BOARD_InitDebugConsole</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, board.o(i.BOARD_InitDebugConsole))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; UART_Init &rArr; UART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>BOARD_InitPins</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, pin_mux.o(i.BOARD_InitPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = BOARD_InitPins &rArr; PORT_SetPinConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetPinMux
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetPinConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>CLOCK_BootToPeeMode</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_BootToPeeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = CLOCK_BootToPeeMode &rArr; CLOCK_SetPbeMode &rArr; CLOCK_EnablePll0 &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPbeMode
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetExternalRefClkConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[bf]"></a>CLOCK_EnablePll0</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_EnablePll0))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = CLOCK_EnablePll0 &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPbeMode
</UL>

<P><STRONG><a name="[15a]"></a>CLOCK_EnableUsbfs0Clock</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_EnableUsbfs0Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_EnableUsbfs0Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClockInit
</UL>

<P><STRONG><a name="[b6]"></a>CLOCK_GetCoreSysClkFreq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetCoreSysClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = CLOCK_GetCoreSysClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[c1]"></a>CLOCK_GetEr32kClkFreq</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetEr32kClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = CLOCK_GetEr32kClkFreq &rArr; CLOCK_GetOsc0ErClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc0ErClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[c3]"></a>CLOCK_GetFixedFreqClkFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetFixedFreqClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllRefClkFreq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[c7]"></a>CLOCK_GetFllFreq</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetFllFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllRefClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFllSelClkFreq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
</UL>

<P><STRONG><a name="[c8]"></a>CLOCK_GetFreq</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFllSelClkFreq
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc0ErClkFreq
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkFreq
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFixedFreqClkFreq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetEr32kClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscCardInit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcardWaitCardInsert
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_InitTimer
</UL>

<P><STRONG><a name="[ca]"></a>CLOCK_GetInternalRefClkFreq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetInternalRefClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetInternalRefClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkSelectFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[c2]"></a>CLOCK_GetOsc0ErClkFreq</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetOsc0ErClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = CLOCK_GetOsc0ErClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetEr32kClkFreq
</UL>

<P><STRONG><a name="[c0]"></a>CLOCK_GetOutClkFreq</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetOutClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMcgExtClkFreq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkSelectFreq
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFixedFreqClkFreq
</UL>

<P><STRONG><a name="[cb]"></a>CLOCK_GetPll0Freq</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetPll0Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = CLOCK_GetPll0Freq &rArr; CLOCK_GetPll0RefFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0RefFreq
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFllSelClkFreq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
</UL>

<P><STRONG><a name="[c9]"></a>CLOCK_GetPllFllSelClkFreq</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetPllFllSelClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = CLOCK_GetPllFllSelClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[b0]"></a>CLOCK_InitOsc0</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_InitOsc0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_InitOsc0
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscRangeFromFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[bd]"></a>CLOCK_SetExternalRefClkConfig</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_SetExternalRefClkConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetExternalRefClkConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToPeeMode
</UL>

<P><STRONG><a name="[b1]"></a>CLOCK_SetInternalRefClkConfig</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, fsl_clock.o(i.CLOCK_SetInternalRefClkConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLOCK_SetInternalRefClkConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[be]"></a>CLOCK_SetPbeMode</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_SetPbeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = CLOCK_SetPbeMode &rArr; CLOCK_EnablePll0 &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnablePll0
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToPeeMode
</UL>

<P><STRONG><a name="[b4]"></a>CLOCK_SetSimConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_SetSimConfig))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[b7]"></a>DbgConsole_Init</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, fsl_debug_console.o(i.DbgConsole_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; UART_Init &rArr; UART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[d4]"></a>DbgConsole_Printf</STRONG> (Thumb, 70 bytes, Stack size 160 bytes, fsl_debug_console.o(i.DbgConsole_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkFsSys
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscSend
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscRecv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscCardInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscBulkOut
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscApp
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceApplicationInit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcardWaitCardInsert
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[d3]"></a>DbgConsole_SendDataReliable</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_debug_console.o(i.DbgConsole_SendDataReliable))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = DbgConsole_SendDataReliable &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_WriteBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintCallback
</UL>

<P><STRONG><a name="[d7]"></a>HAL_UartInit</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, uart_adapter.o(i.HAL_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = HAL_UartInit &rArr; UART_Init &rArr; UART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetDefaultConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
</UL>

<P><STRONG><a name="[db]"></a>HAL_UartSendBlocking</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, uart_adapter.o(i.HAL_UartSendBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = HAL_UartSendBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
</UL>

<P><STRONG><a name="[49]"></a>PORTE_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, fsl_sdmmc_host.o(i.PORTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PORTE_IRQHandler &rArr; SDMMCEVENT_Notify
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_Notify
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_NotifyCardInsertStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>SDHC_DriverIRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fsl_sdhc.o(i.SDHC_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = SDHC_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[e0]"></a>SDHC_GetCapability</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, fsl_sdhc.o(i.SDHC_GetCapability))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = SDHC_GetCapability &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[e2]"></a>SDHC_Init</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, fsl_sdhc.o(i.SDHC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = SDHC_Init &rArr; SDHC_SetTransferInterrupt &rArr; SDHC_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_Reset
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_SetTransferInterrupt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_GetInstance
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_Init
</UL>

<P><STRONG><a name="[e3]"></a>SDHC_Reset</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_sdhc.o(i.SDHC_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDHC_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ErrorRecovery
</UL>

<P><STRONG><a name="[f4]"></a>SDHC_SetAdmaTableConfig</STRONG> (Thumb, 256 bytes, Stack size 36 bytes, fsl_sdhc.o(i.SDHC_SetAdmaTableConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SDHC_SetAdmaTableConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferNonBlocking
</UL>

<P><STRONG><a name="[110]"></a>SDHC_SetCardActive</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fsl_sdhc.o(i.SDHC_SetCardActive))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[e6]"></a>SDHC_SetSdClock</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, fsl_sdhc.o(i.SDHC_SetSdClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = SDHC_SetSdClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectBusTiming
</UL>

<P><STRONG><a name="[e7]"></a>SDHC_SetTransferConfig</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, fsl_sdhc.o(i.SDHC_SetTransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = SDHC_SetTransferConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_StartTransfer
</UL>

<P><STRONG><a name="[e9]"></a>SDHC_TransferCreateHandle</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, fsl_sdhc.o(i.SDHC_TransferCreateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = SDHC_TransferCreateHandle &rArr; SDHC_SetTransferInterrupt &rArr; SDHC_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_SetTransferInterrupt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_GetInstance
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_Init
</UL>

<P><STRONG><a name="[91]"></a>SDHC_TransferHandleIRQ</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, fsl_sdhc.o(i.SDHC_TransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = SDHC_TransferHandleIRQ &rArr; SDHC_TransferHandleCommand &rArr; SDHC_ReceiveCommandResponse &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleSdioInterrupt
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleSdioBlockGap
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleData
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleCardDetect
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_ClearInterruptStatusFlags
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_sdhc.o(i.SDHC_TransferCreateHandle)
</UL>
<P><STRONG><a name="[f2]"></a>SDHC_TransferNonBlocking</STRONG> (Thumb, 174 bytes, Stack size 64 bytes, fsl_sdhc.o(i.SDHC_TransferNonBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = SDHC_TransferNonBlocking &rArr; SDHC_StartTransfer &rArr; SDHC_SetTransferConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_SetAdmaTableConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_StartTransfer
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_GetPresentStatusFlags
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
</UL>

<P><STRONG><a name="[f5]"></a>SDMMCEVENT_Create</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fsl_sdmmc_event.o(i.SDMMCEVENT_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDMMCEVENT_Create
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_CardDetectInit
</UL>

<P><STRONG><a name="[fc]"></a>SDMMCEVENT_Delay</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_sdmmc_event.o(i.SDMMCEVENT_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_Delay
</UL>

<P><STRONG><a name="[f7]"></a>SDMMCEVENT_Delete</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fsl_sdmmc_event.o(i.SDMMCEVENT_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDMMCEVENT_Delete
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
</UL>

<P><STRONG><a name="[f8]"></a>SDMMCEVENT_InitTimer</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_sdmmc_event.o(i.SDMMCEVENT_InitTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = SDMMCEVENT_InitTimer &rArr; CLOCK_GetFreq &rArr; CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_Init
</UL>

<P><STRONG><a name="[df]"></a>SDMMCEVENT_Notify</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fsl_sdmmc_event.o(i.SDMMCEVENT_Notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDMMCEVENT_Notify
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTE_IRQHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferCompleteCallback
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_DetectCardInsertByHost
</UL>

<P><STRONG><a name="[f9]"></a>SDMMCEVENT_Wait</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fsl_sdmmc_event.o(i.SDMMCEVENT_Wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDMMCEVENT_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_WaitCardDetectStatus
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
</UL>

<P><STRONG><a name="[fb]"></a>SDMMCHOST_Delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_sdmmc_host.o(i.SDMMCHOST_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMCHOST_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscApp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_PowerOnCard
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_PowerOffCard
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ExecuteTuning
</UL>

<P><STRONG><a name="[fd]"></a>SDMMCHOST_ErrorRecovery</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_sdmmc_host.o(i.SDMMCHOST_ErrorRecovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDMMCHOST_ErrorRecovery &rArr; SDHC_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
</UL>

<P><STRONG><a name="[fe]"></a>SDMMCHOST_Init</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, fsl_sdmmc_host.o(i.SDMMCHOST_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = SDMMCHOST_Init &rArr; SDMMCEVENT_InitTimer &rArr; CLOCK_GetFreq &rArr; CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_InitTimer
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_Create
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferCreateHandle
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_CardDetectInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HostInit
</UL>

<P><STRONG><a name="[ff]"></a>SDMMCHOST_PowerOffCard</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fsl_sdmmc_host.o(i.SDMMCHOST_PowerOffCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDMMCHOST_PowerOffCard &rArr; SDMMCHOST_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerOffCard
</UL>

<P><STRONG><a name="[100]"></a>SDMMCHOST_PowerOnCard</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fsl_sdmmc_host.o(i.SDMMCHOST_PowerOnCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDMMCHOST_PowerOnCard &rArr; SDMMCHOST_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerOnCard
</UL>

<P><STRONG><a name="[11e]"></a>SDMMCHOST_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fsl_sdmmc_host.o(i.SDMMCHOST_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HostReset
</UL>

<P><STRONG><a name="[101]"></a>SDMMCHOST_WaitCardDetectStatus</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, fsl_sdmmc_host.o(i.SDMMCHOST_WaitCardDetectStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMCHOST_WaitCardDetectStatus &rArr; SDMMCEVENT_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitCardDetectStatus
</UL>

<P><STRONG><a name="[102]"></a>SDMMC_ExecuteTuning</STRONG> (Thumb, 114 bytes, Stack size 216 bytes, fsl_sdmmc_common.o(i.SDMMC_ExecuteTuning))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SDMMC_ExecuteTuning &rArr; SDMMCHOST_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_Delay
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectBusTiming
</UL>

<P><STRONG><a name="[103]"></a>SDMMC_GoIdle</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, fsl_sdmmc_common.o(i.SDMMC_GoIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = SDMMC_GoIdle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GoIdle
</UL>

<P><STRONG><a name="[104]"></a>SDMMC_SelectCard</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, fsl_sdmmc_common.o(i.SDMMC_SelectCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = SDMMC_SelectCard &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCard
</UL>

<P><STRONG><a name="[105]"></a>SDMMC_SendApplicationCommand</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, fsl_sdmmc_common.o(i.SDMMC_SendApplicationCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = SDMMC_SendApplicationCommand &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendApplicationCmd
</UL>

<P><STRONG><a name="[106]"></a>SDMMC_SetBlockSize</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, fsl_sdmmc_common.o(i.SDMMC_SetBlockSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = SDMMC_SetBlockSize &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[107]"></a>SDMMC_SwitchToVoltage</STRONG> (Thumb, 48 bytes, Stack size 64 bytes, fsl_sdmmc_common.o(i.SDMMC_SwitchToVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = SDMMC_SwitchToVoltage &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchVoltage
</UL>

<P><STRONG><a name="[10c]"></a>SD_CardDeinit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_sd.o(i.SD_CardDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = SD_CardDeinit &rArr; SD_SelectCard &rArr; SDMMC_SelectCard &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCard
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_initialize
</UL>

<P><STRONG><a name="[10e]"></a>SD_CardInit</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, fsl_sd.o(i.SD_CardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = SD_CardInit &rArr; SD_ReadStatus &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_SetSdClock
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_SetCardActive
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_GetCapability
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SetBlockSize
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCard
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadStatus
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProbeBusVoltage
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDataBusWidth
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendScr
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendRca
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCsd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectBusTiming
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_AllSendCid
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_SetDataBusWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_initialize
</UL>

<P><STRONG><a name="[11c]"></a>SD_HostInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fsl_sd.o(i.SD_HostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = SD_HostInit &rArr; SDMMCHOST_Init &rArr; SDMMCEVENT_InitTimer &rArr; CLOCK_GetFreq &rArr; CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcardWaitCardInsert
</UL>

<P><STRONG><a name="[11d]"></a>SD_HostReset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_sd.o(i.SD_HostReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_HostReset
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_initialize
</UL>

<P><STRONG><a name="[11f]"></a>SD_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, fsl_sd.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = SD_Init &rArr; SD_CardInit &rArr; SD_ReadStatus &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitCardDetectStatus
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerOnCard
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerOffCard
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HostInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HostReset
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscCardInit
</UL>

<P><STRONG><a name="[120]"></a>SD_PowerOffCard</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fsl_sd.o(i.SD_PowerOffCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_PowerOffCard &rArr; SDMMCHOST_PowerOffCard &rArr; SDMMCHOST_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_PowerOffCard
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcardWaitCardInsert
</UL>

<P><STRONG><a name="[122]"></a>SD_PowerOnCard</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fsl_sd.o(i.SD_PowerOnCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_PowerOnCard &rArr; SDMMCHOST_PowerOnCard &rArr; SDMMCHOST_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_PowerOnCard
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcardWaitCardInsert
</UL>

<P><STRONG><a name="[111]"></a>SD_ProbeBusVoltage</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, fsl_sd.o(i.SD_ProbeBusVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = SD_ProbeBusVoltage &rArr; SD_ApplicationSendOperationCondition &rArr; SD_SendApplicationCmd &rArr; SDMMC_SendApplicationCommand &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchVoltage
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendInterfaceCondition
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GoIdle
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ApplicationSendOperationCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[128]"></a>SD_ReadBlocks</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, fsl_sd.o(i.SD_ReadBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = SD_ReadBlocks &rArr; SD_Read &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscSend
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_read
</UL>

<P><STRONG><a name="[117]"></a>SD_ReadStatus</STRONG> (Thumb, 234 bytes, Stack size 80 bytes, fsl_sd.o(i.SD_ReadStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = SD_ReadStatus &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___8_fsl_sd_c_66d42394____REV16
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteComplete
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendApplicationCmd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DecodeStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[10d]"></a>SD_SelectCard</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fsl_sd.o(i.SD_SelectCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = SD_SelectCard &rArr; SDMMC_SelectCard &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SelectCard
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardDeinit
</UL>

<P><STRONG><a name="[121]"></a>SD_WaitCardDetectStatus</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fsl_sd.o(i.SD_WaitCardDetectStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_WaitCardDetectStatus &rArr; SDMMCHOST_WaitCardDetectStatus &rArr; SDMMCEVENT_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_WaitCardDetectStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcardWaitCardInsert
</UL>

<P><STRONG><a name="[130]"></a>SD_WriteBlocks</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, fsl_sd.o(i.SD_WriteBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscBulkOut
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_write
</UL>

<P><STRONG><a name="[d0]"></a>SerialManager_Init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, serial_manager.o(i.SerialManager_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; UART_Init &rArr; UART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[d2]"></a>SerialManager_OpenReadHandle</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, serial_manager.o(i.SerialManager_OpenReadHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = SerialManager_OpenReadHandle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[d1]"></a>SerialManager_OpenWriteHandle</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, serial_manager.o(i.SerialManager_OpenWriteHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = SerialManager_OpenWriteHandle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[d6]"></a>SerialManager_WriteBlocking</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, serial_manager.o(i.SerialManager_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SerialManager_WriteBlocking &rArr; SerialManager_Write &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
</UL>

<P><STRONG><a name="[131]"></a>Serial_UartInit</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, serial_port_uart.o(i.Serial_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = Serial_UartInit &rArr; HAL_UartInit &rArr; UART_Init &rArr; UART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
</UL>

<P><STRONG><a name="[133]"></a>Serial_UartWrite</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, serial_port_uart.o(i.Serial_UartWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = Serial_UartWrite &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_StartWriting
</UL>

<P><STRONG><a name="[d5]"></a>StrFormatPrintf</STRONG> (Thumb, 558 bytes, Stack size 120 bytes, fsl_str.o(i.StrFormatPrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_sdmmc_event.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[159]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 432 bytes, Stack size 0 bytes, system_mk64f12.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClockInit
</UL>

<P><STRONG><a name="[62]"></a>SystemInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, system_mk64f12.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[137]"></a>SystemInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_mk64f12.o(i.SystemInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[138]"></a>UART0_DriverIRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_uart.o(i.UART0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[7c]"></a>UART0_RX_TX_DriverIRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_uart.o(i.UART0_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_RX_TX_DriverIRQHandler &rArr; UART0_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[139]"></a>UART1_DriverIRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_uart.o(i.UART1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>UART1_RX_TX_DriverIRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_uart.o(i.UART1_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1_RX_TX_DriverIRQHandler &rArr; UART1_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[13a]"></a>UART2_DriverIRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_uart.o(i.UART2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[80]"></a>UART2_RX_TX_DriverIRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_uart.o(i.UART2_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART2_RX_TX_DriverIRQHandler &rArr; UART2_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[13b]"></a>UART3_DriverIRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_uart.o(i.UART3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART3_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[82]"></a>UART3_RX_TX_DriverIRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_uart.o(i.UART3_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART3_RX_TX_DriverIRQHandler &rArr; UART3_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[13c]"></a>UART4_DriverIRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_uart.o(i.UART4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART4_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[85]"></a>UART4_RX_TX_DriverIRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_uart.o(i.UART4_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART4_RX_TX_DriverIRQHandler &rArr; UART4_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[13d]"></a>UART5_DriverIRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_uart.o(i.UART5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART5_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[87]"></a>UART5_RX_TX_DriverIRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_uart.o(i.UART5_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART5_RX_TX_DriverIRQHandler &rArr; UART5_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[d8]"></a>UART_GetDefaultConfig</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, fsl_uart.o(i.UART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = UART_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>

<P><STRONG><a name="[13e]"></a>UART_GetInstance</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_uart.o(i.UART_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = UART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[d9]"></a>UART_Init</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, fsl_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = UART_Init &rArr; UART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>

<P><STRONG><a name="[dc]"></a>UART_WriteBlocking</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_uart.o(i.UART_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_WriteBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
</UL>

<P><STRONG><a name="[3f]"></a>USB0_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, disk_sdcard.o(i.USB0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USB0_IRQHandler &rArr; USB_DeviceKhciIsrFunction &rArr; USB_DeviceKhciInterruptTokenDone &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciIsrFunction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[143]"></a>USB_DeviceApplicationInit</STRONG> (Thumb, 480 bytes, Stack size 8 bytes, disk_sdcard.o(i.USB_DeviceApplicationInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = USB_DeviceApplicationInit &rArr; USB_DeviceMscCardInit &rArr; SD_Init &rArr; SD_CardInit &rArr; SD_ReadStatus &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceRun
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscCardInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceIsrEnable
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClockInit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSMPU_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>USB_DeviceCallback</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, disk_sdcard.o(i.USB_DeviceCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USB_DeviceCallback &rArr; USB_DeviceControlPipeInit &rArr; USB_DeviceInitEndpoint &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceRecvRequest
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControlPipeInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscEndpointsInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscEndpointsDeinit
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetInterface
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetConfigure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disk_sdcard.o(i.USB_DeviceApplicationInit)
</UL>
<P><STRONG><a name="[15b]"></a>USB_DeviceCancel</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, usb_device_dci.o(i.USB_DeviceCancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DeviceCancel
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceConfigureEndpointStatus
</UL>

<P><STRONG><a name="[144]"></a>USB_DeviceClockInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, disk_sdcard.o(i.USB_DeviceClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DeviceClockInit &rArr; CLOCK_EnableUsbfs0Clock
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableUsbfs0Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceApplicationInit
</UL>

<P><STRONG><a name="[156]"></a>USB_DeviceConfigureEndpointStatus</STRONG> (Thumb, 510 bytes, Stack size 24 bytes, disk_sdcard.o(i.USB_DeviceConfigureEndpointStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USB_DeviceConfigureEndpointStatus &rArr; USB_DeviceSendRequest &rArr; USB_DeviceTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceUnstallEndpoint
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceStallEndpoint
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSendRequest
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceRecvRequest
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCancel
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SetClearFeature
</UL>

<P><STRONG><a name="[153]"></a>USB_DeviceConfigureRemoteWakeup</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, disk_sdcard.o(i.USB_DeviceConfigureRemoteWakeup))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SetClearFeature
</UL>

<P><STRONG><a name="[97]"></a>USB_DeviceControlCallback</STRONG> (Thumb, 388 bytes, Stack size 56 bytes, usb_device_ch9.o(i.USB_DeviceControlCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USB_DeviceControlCallback &rArr; USB_DeviceControlCallbackFeedback &rArr; USB_DeviceSendRequest &rArr; USB_DeviceTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControlCallbackFeedback
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceRecvRequest
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceProcessClassRequest
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetSetupBuffer
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetClassReceiveBuffer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_ch9.o(i.USB_DeviceControlPipeInit)
</UL>
<P><STRONG><a name="[14a]"></a>USB_DeviceControlPipeInit</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, usb_device_ch9.o(i.USB_DeviceControlPipeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USB_DeviceControlPipeInit &rArr; USB_DeviceInitEndpoint &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInitEndpoint
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDeinitEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCallback
</UL>

<P><STRONG><a name="[163]"></a>USB_DeviceDeinit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_device_dci.o(i.USB_DeviceDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DeviceDeinit &rArr; USB_DeviceFreeHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceFreeHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
</UL>

<P><STRONG><a name="[162]"></a>USB_DeviceDeinitEndpoint</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, usb_device_dci.o(i.USB_DeviceDeinitEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_DeviceDeinitEndpoint &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControl
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControlPipeInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscEndpointsDeinit
</UL>

<P><STRONG><a name="[15e]"></a>USB_DeviceGetClassReceiveBuffer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, disk_sdcard.o(i.USB_DeviceGetClassReceiveBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DeviceGetClassReceiveBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControlCallback
</UL>

<P><STRONG><a name="[14f]"></a>USB_DeviceGetConfigure</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_device_descriptor.o(i.USB_DeviceGetConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9GetConfiguration
</UL>

<P><STRONG><a name="[150]"></a>USB_DeviceGetDescriptor</STRONG> (Thumb, 184 bytes, Stack size 28 bytes, usb_device_descriptor.o(i.USB_DeviceGetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_DeviceGetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9GetDescriptor
</UL>

<P><STRONG><a name="[151]"></a>USB_DeviceGetInterface</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_device_descriptor.o(i.USB_DeviceGetInterface))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9GetInterface
</UL>

<P><STRONG><a name="[15d]"></a>USB_DeviceGetSetupBuffer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, disk_sdcard.o(i.USB_DeviceGetSetupBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControlCallback
</UL>

<P><STRONG><a name="[14e]"></a>USB_DeviceGetStatus</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, usb_device_dci.o(i.USB_DeviceGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_DeviceGetStatus &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControl
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SynchFrame
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SetInterface
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SetConfiguration
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SetClearFeature
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SetAddress
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9GetStatus
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9GetInterface
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9GetDescriptor
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9GetConfiguration
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControlCallback
</UL>

<P><STRONG><a name="[147]"></a>USB_DeviceInit</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, usb_device_dci.o(i.USB_DeviceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_DeviceInit &rArr; USB_DeviceDeinit &rArr; USB_DeviceFreeHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDeinit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetControllerInterface
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceFreeHandle
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAllocateHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceApplicationInit
</UL>

<P><STRONG><a name="[161]"></a>USB_DeviceInitEndpoint</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, usb_device_dci.o(i.USB_DeviceInitEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_DeviceInitEndpoint &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControl
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControlPipeInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscEndpointsInit
</UL>

<P><STRONG><a name="[148]"></a>USB_DeviceIsrEnable</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, disk_sdcard.o(i.USB_DeviceIsrEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DeviceIsrEnable &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceApplicationInit
</UL>

<P><STRONG><a name="[a7]"></a>USB_DeviceKhciCancel</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, usb_device_khci.o(i.USB_DeviceKhciCancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USB_DeviceKhciCancel &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotificationTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciEndpointUnstall
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciEndpointStall
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciEndpointDeinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_dci.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>USB_DeviceKhciControl</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, usb_device_khci.o(i.USB_DeviceKhciControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USB_DeviceKhciControl &rArr; USB_DeviceKhciEndpointUnstall &rArr; USB_DeviceKhciCancel &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciSetDefaultState
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciEndpointUnstall
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciEndpointStall
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciEndpointInit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciEndpointDeinit
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_dci.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>USB_DeviceKhciDeinit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, usb_device_khci.o(i.USB_DeviceKhciDeinit))
<BR>[Address Reference Count : 1]<UL><LI> usb_device_dci.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>USB_DeviceKhciInit</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, usb_device_khci.o(i.USB_DeviceKhciInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = USB_DeviceKhciInit &rArr; USB_DeviceKhciControl &rArr; USB_DeviceKhciEndpointUnstall &rArr; USB_DeviceKhciCancel &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciControl
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciSetDefaultState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_dci.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>USB_DeviceKhciIsrFunction</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, usb_device_khci.o(i.USB_DeviceKhciIsrFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USB_DeviceKhciIsrFunction &rArr; USB_DeviceKhciInterruptTokenDone &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciInterruptTokenDone
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciInterruptStall
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciInterruptReset
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>USB_DeviceKhciRecv</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, usb_device_khci.o(i.USB_DeviceKhciRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USB_DeviceKhciRecv &rArr; USB_DeviceKhciPrimeNextSetup &rArr; USB_DeviceKhciEndpointTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciPrimeNextSetup
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciInterruptTokenDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_dci.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>USB_DeviceKhciSend</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, usb_device_khci.o(i.USB_DeviceKhciSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USB_DeviceKhciSend &rArr; USB_DeviceKhciPrimeNextSetup &rArr; USB_DeviceKhciEndpointTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciPrimeNextSetup
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciInterruptTokenDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_dci.o(.constdata)
</UL>
<P><STRONG><a name="[173]"></a>USB_DeviceMscApp</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, disk_sdcard.o(i.USB_DeviceMscApp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1012<LI>Call Chain = USB_DeviceMscApp &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscAppTask
</UL>

<P><STRONG><a name="[176]"></a>USB_DeviceMscAppTask</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, disk_sdcard.o(i.USB_DeviceMscAppTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 1020<LI>Call Chain = USB_DeviceMscAppTask &rArr; USB_DeviceMscApp &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscApp
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>USB_DeviceMscBulkIn</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, disk_sdcard.o(i.USB_DeviceMscBulkIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = USB_DeviceMscBulkIn &rArr; USB_DeviceMscSend &rArr; SD_ReadBlocks &rArr; SD_Read &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceStallEndpoint
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSendRequest
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceRecvRequest
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disk_sdcard.o(i.USB_DeviceMscEndpointsInit)
</UL>
<P><STRONG><a name="[99]"></a>USB_DeviceMscBulkOut</STRONG> (Thumb, 578 bytes, Stack size 24 bytes, disk_sdcard.o(i.USB_DeviceMscBulkOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = USB_DeviceMscBulkOut &rArr; USB_DeviceMscProcessUfiCommand &rArr; USB_DeviceMscUfiReadFormatCapacityCommand &rArr; USB_DeviceMscUfiThirteenCasesCheck &rArr; USB_DeviceMscLbaTransfer &rArr; USB_DeviceMscSend &rArr; SD_ReadBlocks &rArr; SD_Read &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceStallEndpoint
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSendRequest
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceRecvRequest
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlocks
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscRecv
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscProcessUfiCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disk_sdcard.o(i.USB_DeviceMscEndpointsInit)
</UL>
<P><STRONG><a name="[146]"></a>USB_DeviceMscCardInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, disk_sdcard.o(i.USB_DeviceMscCardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = USB_DeviceMscCardInit &rArr; SD_Init &rArr; SD_CardInit &rArr; SD_ReadStatus &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcardWaitCardInsert
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceApplicationInit
</UL>

<P><STRONG><a name="[14b]"></a>USB_DeviceMscEndpointsDeinit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, disk_sdcard.o(i.USB_DeviceMscEndpointsDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_DeviceMscEndpointsDeinit &rArr; USB_DeviceDeinitEndpoint &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDeinitEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCallback
</UL>

<P><STRONG><a name="[14c]"></a>USB_DeviceMscEndpointsInit</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, disk_sdcard.o(i.USB_DeviceMscEndpointsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USB_DeviceMscEndpointsInit &rArr; USB_DeviceInitEndpoint &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInitEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCallback
</UL>

<P><STRONG><a name="[17b]"></a>USB_DeviceMscLbaTransfer</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, disk_sdcard.o(i.USB_DeviceMscLbaTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = USB_DeviceMscLbaTransfer &rArr; USB_DeviceMscSend &rArr; SD_ReadBlocks &rArr; SD_Read &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscSend
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiThirteenCasesCheck
</UL>

<P><STRONG><a name="[179]"></a>USB_DeviceMscProcessUfiCommand</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, disk_sdcard.o(i.USB_DeviceMscProcessUfiCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = USB_DeviceMscProcessUfiCommand &rArr; USB_DeviceMscUfiReadFormatCapacityCommand &rArr; USB_DeviceMscUfiThirteenCasesCheck &rArr; USB_DeviceMscLbaTransfer &rArr; USB_DeviceMscSend &rArr; SD_ReadBlocks &rArr; SD_Read &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiWriteCommand
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiVerifyCommand
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiUnsupportCommand
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiTestUnitReadyCommand
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiStartStopUnitCommand
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiSendDiagnosticCommand
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiRequestSenseCommand
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiReadFormatCapacityCommand
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiReadCommand
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiReadCapacityCommand
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiPreventAllowMediumCommand
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiModeSenseCommand
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiModeSelectCommand
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiInquiryCommand
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiFormatUnitCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscBulkOut
</UL>

<P><STRONG><a name="[178]"></a>USB_DeviceMscRecv</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, disk_sdcard.o(i.USB_DeviceMscRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = USB_DeviceMscRecv &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceStallEndpoint
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceRecvRequest
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscLbaTransfer
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscBulkOut
</UL>

<P><STRONG><a name="[177]"></a>USB_DeviceMscSend</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, disk_sdcard.o(i.USB_DeviceMscSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = USB_DeviceMscSend &rArr; SD_ReadBlocks &rArr; SD_Read &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceStallEndpoint
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSendRequest
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlocks
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscLbaTransfer
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscBulkIn
</UL>

<P><STRONG><a name="[182]"></a>USB_DeviceMscUfiFormatUnitCommand</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, usb_device_msc_ufi.o(i.USB_DeviceMscUfiFormatUnitCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = USB_DeviceMscUfiFormatUnitCommand &rArr; USB_DeviceMscUfiThirteenCasesCheck &rArr; USB_DeviceMscLbaTransfer &rArr; USB_DeviceMscSend &rArr; SD_ReadBlocks &rArr; SD_Read &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiThirteenCasesCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscProcessUfiCommand
</UL>

<P><STRONG><a name="[17c]"></a>USB_DeviceMscUfiInquiryCommand</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_device_msc_ufi.o(i.USB_DeviceMscUfiInquiryCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = USB_DeviceMscUfiInquiryCommand &rArr; USB_DeviceMscUfiThirteenCasesCheck &rArr; USB_DeviceMscLbaTransfer &rArr; USB_DeviceMscSend &rArr; SD_ReadBlocks &rArr; SD_Read &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiThirteenCasesCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscProcessUfiCommand
</UL>

<P><STRONG><a name="[185]"></a>USB_DeviceMscUfiModeSelectCommand</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usb_device_msc_ufi.o(i.USB_DeviceMscUfiModeSelectCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = USB_DeviceMscUfiModeSelectCommand &rArr; USB_DeviceMscUfiThirteenCasesCheck &rArr; USB_DeviceMscLbaTransfer &rArr; USB_DeviceMscSend &rArr; SD_ReadBlocks &rArr; SD_Read &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiThirteenCasesCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscProcessUfiCommand
</UL>

<P><STRONG><a name="[184]"></a>USB_DeviceMscUfiModeSenseCommand</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_device_msc_ufi.o(i.USB_DeviceMscUfiModeSenseCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = USB_DeviceMscUfiModeSenseCommand &rArr; USB_DeviceMscUfiThirteenCasesCheck &rArr; USB_DeviceMscLbaTransfer &rArr; USB_DeviceMscSend &rArr; SD_ReadBlocks &rArr; SD_Read &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiThirteenCasesCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscProcessUfiCommand
</UL>

<P><STRONG><a name="[181]"></a>USB_DeviceMscUfiPreventAllowMediumCommand</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, usb_device_msc_ufi.o(i.USB_DeviceMscUfiPreventAllowMediumCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = USB_DeviceMscUfiPreventAllowMediumCommand &rArr; USB_DeviceMscUfiThirteenCasesCheck &rArr; USB_DeviceMscLbaTransfer &rArr; USB_DeviceMscSend &rArr; SD_ReadBlocks &rArr; SD_Read &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiThirteenCasesCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscProcessUfiCommand
</UL>

<P><STRONG><a name="[183]"></a>USB_DeviceMscUfiReadCapacityCommand</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usb_device_msc_ufi.o(i.USB_DeviceMscUfiReadCapacityCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = USB_DeviceMscUfiReadCapacityCommand &rArr; USB_DeviceMscUfiThirteenCasesCheck &rArr; USB_DeviceMscLbaTransfer &rArr; USB_DeviceMscSend &rArr; SD_ReadBlocks &rArr; SD_Read &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiThirteenCasesCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscProcessUfiCommand
</UL>

<P><STRONG><a name="[17d]"></a>USB_DeviceMscUfiReadCommand</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, usb_device_msc_ufi.o(i.USB_DeviceMscUfiReadCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = USB_DeviceMscUfiReadCommand &rArr; USB_DeviceMscUfiThirteenCasesCheck &rArr; USB_DeviceMscLbaTransfer &rArr; USB_DeviceMscSend &rArr; SD_ReadBlocks &rArr; SD_Read &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiThirteenCasesCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscProcessUfiCommand
</UL>

<P><STRONG><a name="[186]"></a>USB_DeviceMscUfiReadFormatCapacityCommand</STRONG> (Thumb, 402 bytes, Stack size 72 bytes, usb_device_msc_ufi.o(i.USB_DeviceMscUfiReadFormatCapacityCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 740<LI>Call Chain = USB_DeviceMscUfiReadFormatCapacityCommand &rArr; USB_DeviceMscUfiThirteenCasesCheck &rArr; USB_DeviceMscLbaTransfer &rArr; USB_DeviceMscSend &rArr; SD_ReadBlocks &rArr; SD_Read &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiThirteenCasesCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscProcessUfiCommand
</UL>

<P><STRONG><a name="[17e]"></a>USB_DeviceMscUfiRequestSenseCommand</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_device_msc_ufi.o(i.USB_DeviceMscUfiRequestSenseCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = USB_DeviceMscUfiRequestSenseCommand &rArr; USB_DeviceMscUfiThirteenCasesCheck &rArr; USB_DeviceMscLbaTransfer &rArr; USB_DeviceMscSend &rArr; SD_ReadBlocks &rArr; SD_Read &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiThirteenCasesCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscProcessUfiCommand
</UL>

<P><STRONG><a name="[187]"></a>USB_DeviceMscUfiSendDiagnosticCommand</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usb_device_msc_ufi.o(i.USB_DeviceMscUfiSendDiagnosticCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = USB_DeviceMscUfiSendDiagnosticCommand &rArr; USB_DeviceMscUfiThirteenCasesCheck &rArr; USB_DeviceMscLbaTransfer &rArr; USB_DeviceMscSend &rArr; SD_ReadBlocks &rArr; SD_Read &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiThirteenCasesCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscProcessUfiCommand
</UL>

<P><STRONG><a name="[189]"></a>USB_DeviceMscUfiStartStopUnitCommand</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usb_device_msc_ufi.o(i.USB_DeviceMscUfiStartStopUnitCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = USB_DeviceMscUfiStartStopUnitCommand &rArr; USB_DeviceMscUfiThirteenCasesCheck &rArr; USB_DeviceMscLbaTransfer &rArr; USB_DeviceMscSend &rArr; SD_ReadBlocks &rArr; SD_Read &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiThirteenCasesCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscProcessUfiCommand
</UL>

<P><STRONG><a name="[17f]"></a>USB_DeviceMscUfiTestUnitReadyCommand</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usb_device_msc_ufi.o(i.USB_DeviceMscUfiTestUnitReadyCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = USB_DeviceMscUfiTestUnitReadyCommand &rArr; USB_DeviceMscUfiThirteenCasesCheck &rArr; USB_DeviceMscLbaTransfer &rArr; USB_DeviceMscSend &rArr; SD_ReadBlocks &rArr; SD_Read &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiThirteenCasesCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscProcessUfiCommand
</UL>

<P><STRONG><a name="[18b]"></a>USB_DeviceMscUfiThirteenCasesCheck</STRONG> (Thumb, 780 bytes, Stack size 24 bytes, usb_device_msc_ufi.o(i.USB_DeviceMscUfiThirteenCasesCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = USB_DeviceMscUfiThirteenCasesCheck &rArr; USB_DeviceMscLbaTransfer &rArr; USB_DeviceMscSend &rArr; SD_ReadBlocks &rArr; SD_Read &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceStallEndpoint
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSendRequest
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceRecvRequest
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscLbaTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiWriteCommand
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiVerifyCommand
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiTestUnitReadyCommand
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiStartStopUnitCommand
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiSendDiagnosticCommand
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiRequestSenseCommand
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiReadFormatCapacityCommand
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiReadCommand
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiReadCapacityCommand
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiPreventAllowMediumCommand
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiModeSenseCommand
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiModeSelectCommand
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiInquiryCommand
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiFormatUnitCommand
</UL>

<P><STRONG><a name="[18a]"></a>USB_DeviceMscUfiUnsupportCommand</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usb_device_msc_ufi.o(i.USB_DeviceMscUfiUnsupportCommand))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscProcessUfiCommand
</UL>

<P><STRONG><a name="[188]"></a>USB_DeviceMscUfiVerifyCommand</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usb_device_msc_ufi.o(i.USB_DeviceMscUfiVerifyCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = USB_DeviceMscUfiVerifyCommand &rArr; USB_DeviceMscUfiThirteenCasesCheck &rArr; USB_DeviceMscLbaTransfer &rArr; USB_DeviceMscSend &rArr; SD_ReadBlocks &rArr; SD_Read &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiThirteenCasesCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscProcessUfiCommand
</UL>

<P><STRONG><a name="[180]"></a>USB_DeviceMscUfiWriteCommand</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, usb_device_msc_ufi.o(i.USB_DeviceMscUfiWriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = USB_DeviceMscUfiWriteCommand &rArr; USB_DeviceMscUfiThirteenCasesCheck &rArr; USB_DeviceMscLbaTransfer &rArr; USB_DeviceMscSend &rArr; SD_ReadBlocks &rArr; SD_Read &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiThirteenCasesCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscProcessUfiCommand
</UL>

<P><STRONG><a name="[168]"></a>USB_DeviceNotificationTrigger</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, usb_device_dci.o(i.USB_DeviceNotificationTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciCancel
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciInterruptTokenDone
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciInterruptReset
</UL>

<P><STRONG><a name="[15f]"></a>USB_DeviceProcessClassRequest</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, disk_sdcard.o(i.USB_DeviceProcessClassRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_DeviceProcessClassRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControlCallback
</UL>

<P><STRONG><a name="[14d]"></a>USB_DeviceRecvRequest</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usb_device_dci.o(i.USB_DeviceRecvRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_DeviceRecvRequest &rArr; USB_DeviceTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControlCallbackFeedback
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscRecv
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscBulkOut
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscBulkIn
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceConfigureEndpointStatus
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCallback
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiThirteenCasesCheck
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControlCallback
</UL>

<P><STRONG><a name="[149]"></a>USB_DeviceRun</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usb_device_dci.o(i.USB_DeviceRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DeviceRun &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControl
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceApplicationInit
</UL>

<P><STRONG><a name="[15c]"></a>USB_DeviceSendRequest</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, usb_device_dci.o(i.USB_DeviceSendRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_DeviceSendRequest &rArr; USB_DeviceTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControlCallbackFeedback
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscSend
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscBulkOut
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscBulkIn
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceConfigureEndpointStatus
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiThirteenCasesCheck
</UL>

<P><STRONG><a name="[157]"></a>USB_DeviceSetConfigure</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usb_device_descriptor.o(i.USB_DeviceSetConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USB_DeviceSetConfigure &rArr; USB_DeviceCallback &rArr; USB_DeviceControlPipeInit &rArr; USB_DeviceInitEndpoint &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SetConfiguration
</UL>

<P><STRONG><a name="[158]"></a>USB_DeviceSetInterface</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, usb_device_descriptor.o(i.USB_DeviceSetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USB_DeviceSetInterface &rArr; USB_DeviceCallback &rArr; USB_DeviceControlPipeInit &rArr; USB_DeviceInitEndpoint &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SetInterface
</UL>

<P><STRONG><a name="[152]"></a>USB_DeviceSetStatus</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, usb_device_dci.o(i.USB_DeviceSetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_DeviceSetStatus &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControl
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SetConfiguration
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SetAddress
</UL>

<P><STRONG><a name="[154]"></a>USB_DeviceStallEndpoint</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usb_device_dci.o(i.USB_DeviceStallEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_DeviceStallEndpoint &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControl
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControlCallbackFeedback
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SetClearFeature
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscSend
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscRecv
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscBulkOut
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscBulkIn
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceConfigureEndpointStatus
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscUfiThirteenCasesCheck
</UL>

<P><STRONG><a name="[155]"></a>USB_DeviceUnstallEndpoint</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usb_device_dci.o(i.USB_DeviceUnstallEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_DeviceUnstallEndpoint &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControl
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SetClearFeature
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceConfigureEndpointStatus
</UL>

<P><STRONG><a name="[141]"></a>USB_OsaEnterCritical</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_osa_bm.o(i.USB_OsaEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciEndpointTransfer
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceTransfer
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceFreeHandle
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAllocateHandle
</UL>

<P><STRONG><a name="[142]"></a>USB_OsaExitCritical</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_osa_bm.o(i.USB_OsaExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciEndpointTransfer
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceTransfer
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceFreeHandle
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAllocateHandle
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_assert</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_assert.o(i.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlocks
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlocks
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HostInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferNonBlocking
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferCreateHandle
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMcgExtClkFreq
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleIRQ
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_SetTransferConfig
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_SetSdClock
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_GetCapability
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_DriverIRQHandler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleData
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleCommand
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_ReceiveCommandResponse
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_GetInstance
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetPinConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToPeeMode
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetInstance
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetDefaultConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPbeMode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc0ErClkFreq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetEr32kClkFreq
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnablePll0
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SwitchToVoltage
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SetBlockSize
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendApplicationCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SelectCard
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GoIdle
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCard
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadStatus
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProbeBusVoltage
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardDeinit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteComplete
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Transfer
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchVoltage
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchFunction
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransmission
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDataBusWidth
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendWriteSuccessBlocks
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendScr
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendRca
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendInterfaceCondition
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCsd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendApplicationCmd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectFunction
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectBusTiming
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GoIdle
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DecodeStatus
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DecodeScr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DecodeCsd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DecodeCid
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ApplicationSendOperationCondition
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_AllSendCid
</UL>

<P><STRONG><a name="[1cb]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1cc]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1cd]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1a5]"></a>disk_initialize</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = disk_initialize &rArr; sd_disk_initialize &rArr; SD_CardInit &rArr; SD_ReadStatus &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1a7]"></a>disk_ioctl</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = disk_ioctl &rArr; sd_disk_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[1a9]"></a>disk_read</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = disk_read &rArr; sd_disk_read &rArr; SD_ReadBlocks &rArr; SD_Read &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[1ab]"></a>disk_status</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, diskio.o(i.disk_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_status
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1a1]"></a>disk_write</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[1ae]"></a>f_chdrive</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(i.f_chdrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = f_chdrive &rArr; get_ldnumber
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkFsSys
</UL>

<P><STRONG><a name="[175]"></a>f_close</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscApp
</UL>

<P><STRONG><a name="[1b2]"></a>f_mount</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 900<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkFsSys
</UL>

<P><STRONG><a name="[174]"></a>f_open</STRONG> (Thumb, 478 bytes, Stack size 104 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1004<LI>Call Chain = f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscApp
</UL>

<P><STRONG><a name="[1b0]"></a>f_sync</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[61]"></a>main</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, disk_sdcard.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1020<LI>Call Chain = main &rArr; USB_DeviceMscAppTask &rArr; USB_DeviceMscApp &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkFsSys
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscAppTask
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceApplicationInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1bc]"></a>mkFsSys</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, disk_sdcard.o(i.mkFsSys))
<BR><BR>[Stack]<UL><LI>Max Depth = 916<LI>Call Chain = mkFsSys &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdrive
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcardWaitCardInsert
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSMPU_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a6]"></a>sd_disk_initialize</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, fsl_sd_disk.o(i.sd_disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = sd_disk_initialize &rArr; SD_CardInit &rArr; SD_ReadStatus &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HostReset
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardDeinit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[1a8]"></a>sd_disk_ioctl</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, fsl_sd_disk.o(i.sd_disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sd_disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[1aa]"></a>sd_disk_read</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fsl_sd_disk.o(i.sd_disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = sd_disk_read &rArr; SD_ReadBlocks &rArr; SD_Read &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[1ac]"></a>sd_disk_status</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_sd_disk.o(i.sd_disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>

<P><STRONG><a name="[1ad]"></a>sd_disk_write</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fsl_sd_disk.o(i.sd_disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[dd]"></a>GPIO_PinRead</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_sdmmc_host.o(i.GPIO_PinRead))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTE_IRQHandler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_CardDetectInit
</UL>

<P><STRONG><a name="[fa]"></a>SDMMCHOST_CardDetectInit</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, fsl_sdmmc_host.o(i.SDMMCHOST_CardDetectInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDMMCHOST_CardDetectInit &rArr; SDMMCEVENT_Create
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_Create
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_NotifyCardInsertStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_Init
</UL>

<P><STRONG><a name="[93]"></a>SDMMCHOST_DetectCardInsertByHost</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_sdmmc_host.o(i.SDMMCHOST_DetectCardInsertByHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDMMCHOST_DetectCardInsertByHost &rArr; SDMMCEVENT_Notify
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_Notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_sdmmc_host.o(i.SDMMCHOST_Init)
</UL>
<P><STRONG><a name="[94]"></a>SDMMCHOST_DetectCardRemoveByHost</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fsl_sdmmc_host.o(i.SDMMCHOST_DetectCardRemoveByHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDMMCHOST_DetectCardRemoveByHost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_sdmmc_host.o(i.SDMMCHOST_Init)
</UL>
<P><STRONG><a name="[de]"></a>SDMMCHOST_NotifyCardInsertStatus</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fsl_sdmmc_host.o(i.SDMMCHOST_NotifyCardInsertStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDMMCHOST_NotifyCardInsertStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTE_IRQHandler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_CardDetectInit
</UL>

<P><STRONG><a name="[92]"></a>SDMMCHOST_TransferCompleteCallback</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fsl_sdmmc_host.o(i.SDMMCHOST_TransferCompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDMMCHOST_TransferCompleteCallback &rArr; SDMMCEVENT_Notify
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_Notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_sdmmc_host.o(i.SDMMCHOST_Init)
</UL>
<P><STRONG><a name="[95]"></a>SDMMCHOST_TransferFunction</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, fsl_sdmmc_host.o(i.SDMMCHOST_TransferFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = SDMMCHOST_TransferFunction &rArr; SDHC_TransferNonBlocking &rArr; SDHC_StartTransfer &rArr; SDHC_SetTransferConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_Wait
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_Delete
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferNonBlocking
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ErrorRecovery
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_sdmmc_host.o(i.SDMMCHOST_Init)
</UL>
<P><STRONG><a name="[f6]"></a>SDMMCEVENT_GetInstance</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fsl_sdmmc_event.o(i.SDMMCEVENT_GetInstance))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_Wait
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_Notify
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_Delete
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_Create
</UL>

<P><STRONG><a name="[145]"></a>SYSMPU_Enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, disk_sdcard.o(i.SYSMPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkFsSys
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceApplicationInit
</UL>

<P><STRONG><a name="[167]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, disk_sdcard.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscCardInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceIsrEnable
</UL>

<P><STRONG><a name="[17a]"></a>sdcardWaitCardInsert</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, disk_sdcard.o(i.sdcardWaitCardInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = sdcardWaitCardInsert &rArr; SD_HostInit &rArr; SDMMCHOST_Init &rArr; SDMMCEVENT_InitTimer &rArr; CLOCK_GetFreq &rArr; CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitCardDetectStatus
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerOnCard
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerOffCard
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HostInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkFsSys
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceMscCardInit
</UL>

<P><STRONG><a name="[9e]"></a>USB_DeviceCh9GetConfiguration</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, usb_device_ch9.o(i.USB_DeviceCh9GetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_DeviceCh9GetConfiguration &rArr; USB_DeviceGetStatus &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetConfigure
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_ch9.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>USB_DeviceCh9GetDescriptor</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, usb_device_ch9.o(i.USB_DeviceCh9GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_DeviceCh9GetDescriptor &rArr; USB_DeviceGetStatus &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetDescriptor
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_ch9.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>USB_DeviceCh9GetInterface</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, usb_device_ch9.o(i.USB_DeviceCh9GetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USB_DeviceCh9GetInterface &rArr; USB_DeviceGetStatus &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetInterface
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_ch9.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>USB_DeviceCh9GetStatus</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, usb_device_ch9.o(i.USB_DeviceCh9GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USB_DeviceCh9GetStatus &rArr; USB_DeviceGetStatus &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_ch9.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>USB_DeviceCh9SetAddress</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, usb_device_ch9.o(i.USB_DeviceCh9SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USB_DeviceCh9SetAddress &rArr; USB_DeviceSetStatus &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetStatus
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_ch9.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>USB_DeviceCh9SetClearFeature</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, usb_device_ch9.o(i.USB_DeviceCh9SetClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USB_DeviceCh9SetClearFeature &rArr; USB_DeviceConfigureEndpointStatus &rArr; USB_DeviceSendRequest &rArr; USB_DeviceTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceUnstallEndpoint
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceStallEndpoint
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceConfigureRemoteWakeup
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceConfigureEndpointStatus
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_ch9.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>USB_DeviceCh9SetConfiguration</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, usb_device_ch9.o(i.USB_DeviceCh9SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USB_DeviceCh9SetConfiguration &rArr; USB_DeviceSetConfigure &rArr; USB_DeviceCallback &rArr; USB_DeviceControlPipeInit &rArr; USB_DeviceInitEndpoint &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetConfigure
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetStatus
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_ch9.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>USB_DeviceCh9SetInterface</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, usb_device_ch9.o(i.USB_DeviceCh9SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USB_DeviceCh9SetInterface &rArr; USB_DeviceSetInterface &rArr; USB_DeviceCallback &rArr; USB_DeviceControlPipeInit &rArr; USB_DeviceInitEndpoint &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetInterface
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_ch9.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>USB_DeviceCh9SynchFrame</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, usb_device_ch9.o(i.USB_DeviceCh9SynchFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USB_DeviceCh9SynchFrame &rArr; USB_DeviceGetStatus &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_ch9.o(.constdata)
</UL>
<P><STRONG><a name="[160]"></a>USB_DeviceControlCallbackFeedback</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, usb_device_ch9.o(i.USB_DeviceControlCallbackFeedback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USB_DeviceControlCallbackFeedback &rArr; USB_DeviceSendRequest &rArr; USB_DeviceTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceStallEndpoint
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSendRequest
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceRecvRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControlCallback
</UL>

<P><STRONG><a name="[b2]"></a>CLOCK_CONFIG_SetFllExtRefDiv</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock_config.o(i.CLOCK_CONFIG_SetFllExtRefDiv))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[b9]"></a>CLOCK_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pin_mux.o(i.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[bb]"></a>PORT_SetPinConfig</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, pin_mux.o(i.PORT_SetPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = PORT_SetPinConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[ba]"></a>PORT_SetPinMux</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pin_mux.o(i.PORT_SetPinMux))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[16a]"></a>USB_DeviceKhciEndpointDeinit</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, usb_device_khci.o(i.USB_DeviceKhciEndpointDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USB_DeviceKhciEndpointDeinit &rArr; USB_DeviceKhciCancel &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciCancel
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciControl
</UL>

<P><STRONG><a name="[169]"></a>USB_DeviceKhciEndpointInit</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, usb_device_khci.o(i.USB_DeviceKhciEndpointInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USB_DeviceKhciEndpointInit &rArr; USB_DeviceKhciPrimeNextSetup &rArr; USB_DeviceKhciEndpointTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciPrimeNextSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciControl
</UL>

<P><STRONG><a name="[16b]"></a>USB_DeviceKhciEndpointStall</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, usb_device_khci.o(i.USB_DeviceKhciEndpointStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USB_DeviceKhciEndpointStall &rArr; USB_DeviceKhciCancel &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciCancel
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciControl
</UL>

<P><STRONG><a name="[16f]"></a>USB_DeviceKhciEndpointTransfer</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, usb_device_khci.o(i.USB_DeviceKhciEndpointTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DeviceKhciEndpointTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OsaExitCritical
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OsaEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciSend
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciRecv
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciPrimeNextSetup
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciInterruptTokenDone
</UL>

<P><STRONG><a name="[16c]"></a>USB_DeviceKhciEndpointUnstall</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, usb_device_khci.o(i.USB_DeviceKhciEndpointUnstall))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USB_DeviceKhciEndpointUnstall &rArr; USB_DeviceKhciCancel &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciCancel
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciPrimeNextSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciControl
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciInterruptStall
</UL>

<P><STRONG><a name="[170]"></a>USB_DeviceKhciInterruptReset</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, usb_device_khci.o(i.USB_DeviceKhciInterruptReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USB_DeviceKhciInterruptReset &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotificationTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciIsrFunction
</UL>

<P><STRONG><a name="[171]"></a>USB_DeviceKhciInterruptStall</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usb_device_khci.o(i.USB_DeviceKhciInterruptStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USB_DeviceKhciInterruptStall &rArr; USB_DeviceKhciEndpointUnstall &rArr; USB_DeviceKhciCancel &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciEndpointUnstall
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciIsrFunction
</UL>

<P><STRONG><a name="[172]"></a>USB_DeviceKhciInterruptTokenDone</STRONG> (Thumb, 926 bytes, Stack size 72 bytes, usb_device_khci.o(i.USB_DeviceKhciInterruptTokenDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USB_DeviceKhciInterruptTokenDone &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotificationTrigger
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciSend
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciRecv
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciIsrFunction
</UL>

<P><STRONG><a name="[16e]"></a>USB_DeviceKhciPrimeNextSetup</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usb_device_khci.o(i.USB_DeviceKhciPrimeNextSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_DeviceKhciPrimeNextSetup &rArr; USB_DeviceKhciEndpointTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciSend
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciRecv
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciEndpointUnstall
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciEndpointInit
</UL>

<P><STRONG><a name="[16d]"></a>USB_DeviceKhciSetDefaultState</STRONG> (Thumb, 228 bytes, Stack size 12 bytes, usb_device_khci.o(i.USB_DeviceKhciSetDefaultState))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_DeviceKhciSetDefaultState
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceKhciControl
</UL>

<P><STRONG><a name="[f1]"></a>SDHC_ClearInterruptStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_sdhc.o(i.SDHC_ClearInterruptStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleIRQ
</UL>

<P><STRONG><a name="[e1]"></a>SDHC_GetInstance</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fsl_sdhc.o(i.SDHC_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = SDHC_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferCreateHandle
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_SetTransferInterrupt
</UL>

<P><STRONG><a name="[f3]"></a>SDHC_GetPresentStatusFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_sdhc.o(i.SDHC_GetPresentStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferNonBlocking
</UL>

<P><STRONG><a name="[ec]"></a>SDHC_ReadDataPort</STRONG> (Thumb, 104 bytes, Stack size 28 bytes, fsl_sdhc.o(i.SDHC_ReadDataPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SDHC_ReadDataPort
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleData
</UL>

<P><STRONG><a name="[e5]"></a>SDHC_ReceiveCommandResponse</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fsl_sdhc.o(i.SDHC_ReceiveCommandResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = SDHC_ReceiveCommandResponse &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleCommand
</UL>

<P><STRONG><a name="[e4]"></a>SDHC_SetTransferInterrupt</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, fsl_sdhc.o(i.SDHC_SetTransferInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = SDHC_SetTransferInterrupt &rArr; SDHC_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferCreateHandle
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_Init
</UL>

<P><STRONG><a name="[e8]"></a>SDHC_StartTransfer</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, fsl_sdhc.o(i.SDHC_StartTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = SDHC_StartTransfer &rArr; SDHC_SetTransferConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_SetTransferConfig
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferNonBlocking
</UL>

<P><STRONG><a name="[ee]"></a>SDHC_TransferHandleCardDetect</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fsl_sdhc.o(i.SDHC_TransferHandleCardDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDHC_TransferHandleCardDetect
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleIRQ
</UL>

<P><STRONG><a name="[ea]"></a>SDHC_TransferHandleCommand</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, fsl_sdhc.o(i.SDHC_TransferHandleCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = SDHC_TransferHandleCommand &rArr; SDHC_ReceiveCommandResponse &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_ReceiveCommandResponse
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleIRQ
</UL>

<P><STRONG><a name="[eb]"></a>SDHC_TransferHandleData</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, fsl_sdhc.o(i.SDHC_TransferHandleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = SDHC_TransferHandleData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_WriteDataPort
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_ReadDataPort
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleIRQ
</UL>

<P><STRONG><a name="[f0]"></a>SDHC_TransferHandleSdioBlockGap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fsl_sdhc.o(i.SDHC_TransferHandleSdioBlockGap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDHC_TransferHandleSdioBlockGap
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleIRQ
</UL>

<P><STRONG><a name="[ef]"></a>SDHC_TransferHandleSdioInterrupt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fsl_sdhc.o(i.SDHC_TransferHandleSdioInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDHC_TransferHandleSdioInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleIRQ
</UL>

<P><STRONG><a name="[ed]"></a>SDHC_WriteDataPort</STRONG> (Thumb, 108 bytes, Stack size 28 bytes, fsl_sdhc.o(i.SDHC_WriteDataPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SDHC_WriteDataPort
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleData
</UL>

<P><STRONG><a name="[c5]"></a>CLOCK_GetFllExtRefClkFreq</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, fsl_clock.o(i.CLOCK_GetFllExtRefClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMcgExtClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllRefClkFreq
</UL>

<P><STRONG><a name="[c4]"></a>CLOCK_GetFllRefClkFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetFllRefClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllExtRefClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFixedFreqClkFreq
</UL>

<P><STRONG><a name="[cc]"></a>CLOCK_GetInternalRefClkSelectFreq</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetInternalRefClkSelectFreq))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkFreq
</UL>

<P><STRONG><a name="[c6]"></a>CLOCK_GetMcgExtClkFreq</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetMcgExtClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0RefFreq
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllExtRefClkFreq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
</UL>

<P><STRONG><a name="[ce]"></a>CLOCK_GetOscRangeFromFreq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetOscRangeFromFreq))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitOsc0
</UL>

<P><STRONG><a name="[cd]"></a>CLOCK_GetPll0RefFreq</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetPll0RefFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = CLOCK_GetPll0RefFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMcgExtClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
</UL>

<P><STRONG><a name="[140]"></a>USB_DeviceAllocateHandle</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, usb_device_dci.o(i.USB_DeviceAllocateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DeviceAllocateHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OsaExitCritical
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OsaEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
</UL>

<P><STRONG><a name="[165]"></a>USB_DeviceControl</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, usb_device_dci.o(i.USB_DeviceControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DeviceControl
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceUnstallEndpoint
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceStallEndpoint
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceRun
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInitEndpoint
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDeinitEndpoint
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetStatus
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetStatus
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceResetNotification
</UL>

<P><STRONG><a name="[164]"></a>USB_DeviceFreeHandle</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usb_device_dci.o(i.USB_DeviceFreeHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_DeviceFreeHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OsaExitCritical
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OsaEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDeinit
</UL>

<P><STRONG><a name="[166]"></a>USB_DeviceGetControllerInterface</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_device_dci.o(i.USB_DeviceGetControllerInterface))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
</UL>

<P><STRONG><a name="[18c]"></a>USB_DeviceNotification</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, usb_device_dci.o(i.USB_DeviceNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceResetNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotificationTrigger
</UL>

<P><STRONG><a name="[18d]"></a>USB_DeviceResetNotification</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, usb_device_dci.o(i.USB_DeviceResetNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControl
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotification
</UL>

<P><STRONG><a name="[18e]"></a>USB_DeviceTransfer</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, usb_device_dci.o(i.USB_DeviceTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_DeviceTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OsaExitCritical
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OsaEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSendRequest
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceRecvRequest
</UL>

<P><STRONG><a name="[10f]"></a>SDHC_SetDataBusWidth</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_sd.o(i.SDHC_SetDataBusWidth))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[108]"></a>SD_AllSendCid</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, fsl_sd.o(i.SD_AllSendCid))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = SD_AllSendCid &rArr; SD_DecodeCid &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DecodeCid
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[10a]"></a>SD_ApplicationSendOperationCondition</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, fsl_sd.o(i.SD_ApplicationSendOperationCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = SD_ApplicationSendOperationCondition &rArr; SD_SendApplicationCmd &rArr; SDMMC_SendApplicationCommand &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendApplicationCmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProbeBusVoltage
</UL>

<P><STRONG><a name="[109]"></a>SD_DecodeCid</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, fsl_sd.o(i.SD_DecodeCid))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = SD_DecodeCid &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_AllSendCid
</UL>

<P><STRONG><a name="[118]"></a>SD_DecodeCsd</STRONG> (Thumb, 486 bytes, Stack size 16 bytes, fsl_sd.o(i.SD_DecodeCsd))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = SD_DecodeCsd &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCsd
</UL>

<P><STRONG><a name="[119]"></a>SD_DecodeScr</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, fsl_sd.o(i.SD_DecodeScr))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = SD_DecodeScr &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendScr
</UL>

<P><STRONG><a name="[11a]"></a>SD_DecodeStatus</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, fsl_sd.o(i.SD_DecodeStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = SD_DecodeStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadStatus
</UL>

<P><STRONG><a name="[11b]"></a>SD_GoIdle</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_sd.o(i.SD_GoIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = SD_GoIdle &rArr; SDMMC_GoIdle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GoIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProbeBusVoltage
</UL>

<P><STRONG><a name="[125]"></a>SD_Read</STRONG> (Thumb, 242 bytes, Stack size 88 bytes, fsl_sd.o(i.SD_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = SD_Read &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteComplete
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Transfer
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlocks
</UL>

<P><STRONG><a name="[116]"></a>SD_SelectBusTiming</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, fsl_sd.o(i.SD_SelectBusTiming))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = SD_SelectBusTiming &rArr; SD_SelectFunction &rArr; SD_SwitchFunction &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_SetSdClock
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ExecuteTuning
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[12b]"></a>SD_SelectFunction</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, fsl_sd.o(i.SD_SelectFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = SD_SelectFunction &rArr; SD_SwitchFunction &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___8_fsl_sd_c_66d42394____REV16
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchFunction
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectBusTiming
</UL>

<P><STRONG><a name="[10b]"></a>SD_SendApplicationCmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fsl_sd.o(i.SD_SendApplicationCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = SD_SendApplicationCmd &rArr; SDMMC_SendApplicationCommand &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendApplicationCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadStatus
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDataBusWidth
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendWriteSuccessBlocks
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendScr
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ApplicationSendOperationCondition
</UL>

<P><STRONG><a name="[113]"></a>SD_SendCsd</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, fsl_sd.o(i.SD_SendCsd))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = SD_SendCsd &rArr; SD_DecodeCsd &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DecodeCsd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[123]"></a>SD_SendInterfaceCondition</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, fsl_sd.o(i.SD_SendInterfaceCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = SD_SendInterfaceCondition &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProbeBusVoltage
</UL>

<P><STRONG><a name="[112]"></a>SD_SendRca</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, fsl_sd.o(i.SD_SendRca))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = SD_SendRca &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[114]"></a>SD_SendScr</STRONG> (Thumb, 202 bytes, Stack size 80 bytes, fsl_sd.o(i.SD_SendScr))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = SD_SendScr &rArr; SD_SendApplicationCmd &rArr; SDMMC_SendApplicationCommand &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___8_fsl_sd_c_66d42394____REV16
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendApplicationCmd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DecodeScr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[12d]"></a>SD_SendWriteSuccessBlocks</STRONG> (Thumb, 152 bytes, Stack size 80 bytes, fsl_sd.o(i.SD_SendWriteSuccessBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteComplete
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendApplicationCmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
</UL>

<P><STRONG><a name="[115]"></a>SD_SetDataBusWidth</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, fsl_sd.o(i.SD_SetDataBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = SD_SetDataBusWidth &rArr; SD_SendApplicationCmd &rArr; SDMMC_SendApplicationCommand &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendApplicationCmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[12e]"></a>SD_StopTransmission</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, fsl_sd.o(i.SD_StopTransmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Transfer
</UL>

<P><STRONG><a name="[12c]"></a>SD_SwitchFunction</STRONG> (Thumb, 162 bytes, Stack size 88 bytes, fsl_sd.o(i.SD_SwitchFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = SD_SwitchFunction &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectFunction
</UL>

<P><STRONG><a name="[124]"></a>SD_SwitchVoltage</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fsl_sd.o(i.SD_SwitchVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = SD_SwitchVoltage &rArr; SDMMC_SwitchToVoltage &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SwitchToVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProbeBusVoltage
</UL>

<P><STRONG><a name="[127]"></a>SD_Transfer</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, fsl_sd.o(i.SD_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransmission
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteComplete
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
</UL>

<P><STRONG><a name="[126]"></a>SD_WaitWriteComplete</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, fsl_sd.o(i.SD_WaitWriteComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Transfer
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadStatus
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendWriteSuccessBlocks
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
</UL>

<P><STRONG><a name="[12f]"></a>SD_Write</STRONG> (Thumb, 292 bytes, Stack size 96 bytes, fsl_sd.o(i.SD_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteComplete
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Transfer
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendWriteSuccessBlocks
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlocks
</UL>

<P><STRONG><a name="[90]"></a>DbgConsole_PrintCallback</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fsl_debug_console.o(i.DbgConsole_PrintCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DbgConsole_PrintCallback &rArr; DbgConsole_SendDataReliable &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(i.DbgConsole_Printf)
</UL>
<P><STRONG><a name="[135]"></a>ConvertRadixNumToString</STRONG> (Thumb, 168 bytes, Stack size 36 bytes, fsl_str.o(i.ConvertRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ConvertRadixNumToString
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[da]"></a>HAL_UartGetStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart_adapter.o(i.HAL_UartGetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>

<P><STRONG><a name="[132]"></a>SerialManager_StartWriting</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, serial_manager.o(i.SerialManager_StartWriting))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SerialManager_StartWriting &rArr; Serial_UartWrite &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
</UL>

<P><STRONG><a name="[134]"></a>SerialManager_Write</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, serial_manager.o(i.SerialManager_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + In Cycle
<LI>Call Chain = SerialManager_Write &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_StartWriting
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_WriteBlocking
</UL>

<P><STRONG><a name="[18f]"></a>check_fs</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[19a]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[1a0]"></a>clst2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clst2sect))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[193]"></a>create_chain</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[196]"></a>create_name</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = create_name &rArr; mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_2nd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[198]"></a>dbc_1st</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ff.o(i.dbc_1st))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[199]"></a>dbc_2nd</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ff.o(i.dbc_2nd))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[19b]"></a>dir_alloc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 868<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[19e]"></a>dir_clear</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ff.o(i.dir_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = dir_clear &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[1a2]"></a>dir_find</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 868<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[19d]"></a>dir_next</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[1a3]"></a>dir_register</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 884<LI>Call Chain = dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[19c]"></a>dir_sdi</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 812<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[1b3]"></a>find_volume</STRONG> (Thumb, 762 bytes, Stack size 88 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 860<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[1b4]"></a>follow_path</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 900<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[194]"></a>get_fat</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[1af]"></a>get_ldnumber</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdrive
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1b5]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[1b9]"></a>ld_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[191]"></a>ld_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[192]"></a>mem_cmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[1a4]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[197]"></a>mem_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[190]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[195]"></a>put_fat</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[1b8]"></a>remove_chain</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1b7]"></a>st_clust</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[1b6]"></a>st_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[1ba]"></a>st_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[1bb]"></a>sync_fs</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[19f]"></a>sync_window</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 740<LI>Call Chain = sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_SendWriteSuccessBlocks &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[1b1]"></a>validate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = validate &rArr; disk_status
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
